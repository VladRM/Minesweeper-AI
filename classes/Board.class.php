<?php

/**
 * The minesweeper board
 *
 * @author Vlad
 */
class Board {

  // class constants
  const VALUE = 0; // tile value index
  const MINE = -1; // tile value if it's a mine
  const BLANK = 0; // value of blank tiles
  // other possible values: 1 .. 8
  
  const VISIBILITY = 1; // visibility index
  const CLOSED = 0;
  const OPEN = 1;

  const FLAG = 2; // flag index
  const NOT_FLAGGED = 0;
  const FLAGGED = 1; // flagged as a mine


  // class properties
  private $_width;
  private $_height;
  private $_nrMines;
  private $_state;

  private $_game_solved = FALSE;
  private $_game_failed = FALSE;
  private $_game_ended = FALSE;

  /*
   * Class get instance
   */
  public static function getInstanceByState($state) {
    $instance = new Board(1, 1, 0);
    $instance->setState($state);
    return $instance;
  }

  /*
   * Class construct
   */
  public function __construct($width = 30, $height = 16, $nr_mines = 99) {
    $this->_width = $width;
    $this->_height = $height;
    $this->_nrMines = $nr_mines;

    //$this->_state = json_decode('[[[1,0,0],[-1,0,0],[1,0,0],[1,0,0],[-1,0,0],[3,0,0],[-1,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[-1,0,0],[-1,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0]],[[1,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[-1,0,0],[4,0,0],[-1,0,0],[3,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[3,0,0],[-1,0,0],[3,0,0],[-1,0,0],[-1,0,0],[3,0,0],[3,0,0],[-1,0,0],[2,0,0],[-1,0,0],[3,0,0],[2,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0]],[[0,0,0],[0,0,0],[0,0,0],[1,0,0],[2,0,0],[2,0,0],[2,0,0],[1,0,0],[2,0,0],[-1,0,0],[1,0,0],[1,0,0],[-1,0,0],[3,0,0],[-1,0,0],[3,0,0],[3,0,0],[4,0,0],[-1,0,0],[-1,0,0],[2,0,0],[2,0,0],[1,0,0],[1,0,0],[0,0,0],[2,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[2,0,0],[3,0,0],[3,0,0],[3,0,0],[3,0,0],[-1,0,0],[4,0,0],[2,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[3,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0]],[[0,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[1,0,0],[1,0,0],[-1,0,0],[-1,0,0],[3,0,0],[-1,0,0],[2,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[-1,0,0],[2,0,0],[1,0,0],[2,0,0],[2,0,0],[-1,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[2,0,0],[1,0,0],[2,0,0],[1,0,0],[3,0,0],[2,0,0],[2,0,0],[1,0,0],[3,0,0],[3,0,0],[4,0,0],[2,0,0],[2,0,0],[0,0,0],[1,0,0],[-1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[3,0,0],[-1,0,0],[3,0,0]],[[0,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[-1,0,0],[2,0,0],[-1,0,0],[3,0,0],[-1,0,0],[3,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0],[2,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[-1,0,0],[3,0,0]],[[1,0,0],[2,0,0],[-1,0,0],[3,0,0],[-1,0,0],[4,0,0],[3,0,0],[3,0,0],[4,0,0],[-1,0,0],[3,0,0],[1,0,0],[1,0,0],[0,0,0],[2,0,0],[2,0,0],[3,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[2,0,0],[4,0,0],[-1,0,0]],[[-1,0,0],[2,0,0],[2,0,0],[4,0,0],[-1,0,0],[4,0,0],[-1,0,0],[4,0,0],[-1,0,0],[3,0,0],[1,0,0],[0,0,0],[1,0,0],[2,0,0],[4,0,0],[-1,0,0],[3,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[2,0,0],[-1,0,0]],[[1,0,0],[1,0,0],[1,0,0],[-1,0,0],[2,0,0],[3,0,0],[-1,0,0],[6,0,0],[-1,0,0],[3,0,0],[0,0,0],[0,0,0],[2,0,0],[-1,0,0],[-1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[2,0,0],[1,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0]],[[1,0,0],[1,0,0],[2,0,0],[1,0,0],[2,0,0],[2,0,0],[3,0,0],[-1,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0],[2,0,0],[-1,0,0],[6,0,0],[-1,0,0],[5,0,0],[-1,0,0],[3,0,0],[-1,0,0],[2,0,0],[-1,0,0],[1,0,0],[2,0,0],[-1,0,0],[4,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0]],[[3,0,0],[-1,0,0],[2,0,0],[0,0,0],[1,0,0],[-1,0,0],[2,0,0],[3,0,0],[3,0,0],[3,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[-1,0,0],[3,0,0],[-1,0,0],[4,0,0],[-1,0,0],[3,0,0],[3,0,0],[2,0,0],[1,0,0],[2,0,0],[-1,0,0],[4,0,0],[-1,0,0],[4,0,0],[2,0,0],[1,0,0]],[[-1,0,0],[-1,0,0],[2,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[-1,0,0],[2,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[-1,0,0],[2,0,0],[2,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[1,0,0],[3,0,0],[3,0,0],[-1,0,0],[-1,0,0],[3,0,0]],[[3,0,0],[3,0,0],[1,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[3,0,0],[2,0,0],[-1,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[2,0,0],[2,0,0],[2,0,0],[2,0,0],[1,0,0],[0,0,0],[1,0,0],[1,0,0],[3,0,0],[-1,0,0],[5,0,0],[-1,0,0],[-1,0,0]],[[-1,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[2,0,0],[2,0,0],[-1,0,0],[2,0,0],[2,0,0],[3,0,0],[2,0,0],[2,0,0],[-1,0,0],[3,0,0],[-1,0,0],[1,0,0],[1,0,0],[-1,0,0],[2,0,0],[1,0,0],[2,0,0],[3,0,0],[-1,0,0],[4,0,0],[-1,0,0],[3,0,0],[2,0,0],[2,0,0]],[[1,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[2,0,0],[-1,0,0],[2,0,0],[1,0,0],[2,0,0],[-1,0,0],[2,0,0],[-1,0,0],[2,0,0],[2,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[-1,0,0],[2,0,0],[-1,0,0],[-1,0,0],[3,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0]]]');

    // parasite check fail - solved
    //$this->_state = json_decode('[[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[2,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[1,0,0],[1,0,0],[-1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[0,0,0]],[[1,0,0],[2,0,0],[2,0,0],[1,0,0],[2,0,0],[-1,0,0],[4,0,0],[2,0,0],[1,0,0],[2,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[2,0,0],[1,0,0],[1,0,0],[2,0,0],[3,0,0],[5,0,0],[-1,0,0],[3,0,0],[1,0,0]],[[1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[3,0,0],[-1,0,0],[-1,0,0],[2,0,0],[1,0,0],[-1,0,0],[2,0,0],[2,0,0],[-1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[3,0,0],[-1,0,0],[3,0,0],[2,0,0],[-1,0,0],[1,0,0]],[[2,0,0],[3,0,0],[3,0,0],[3,0,0],[-1,0,0],[5,0,0],[-1,0,0],[3,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[2,0,0],[2,0,0],[2,0,0],[0,0,0],[2,0,0],[-1,0,0],[-1,0,0],[3,0,0],[1,0,0],[1,0,0],[1,0,0]],[[2,0,0],[-1,0,0],[2,0,0],[2,0,0],[-1,0,0],[4,0,0],[4,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[2,0,0],[-1,0,0],[1,0,0],[0,0,0],[2,0,0],[-1,0,0],[-1,0,0],[3,0,0],[1,0,0],[1,0,0],[1,0,0]],[[3,0,0],[-1,0,0],[2,0,0],[2,0,0],[4,0,0],[-1,0,0],[4,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0],[3,0,0],[2,0,0],[1,0,0],[2,0,0],[4,0,0],[-1,0,0],[3,0,0],[2,0,0],[-1,0,0],[2,0,0]],[[-1,0,0],[3,0,0],[2,0,0],[1,0,0],[-1,0,0],[-1,0,0],[3,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[1,0,0],[2,0,0],[-1,0,0],[1,0,0],[1,0,0],[-1,0,0],[3,0,0],[4,0,0],[-1,0,0],[4,0,0],[-1,0,0]],[[2,0,0],[-1,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[3,0,0],[3,0,0],[3,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[2,0,0],[2,0,0],[2,0,0],[3,0,0],[-1,0,0],[-1,0,0],[3,0,0],[1,0,0]],[[3,0,0],[3,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[-1,0,0],[3,0,0],[-1,0,0],[1,0,0],[1,0,0],[-1,0,0],[2,0,0],[3,0,0],[-1,0,0],[2,0,0],[2,0,0],[-1,0,0],[3,0,0],[2,0,0],[1,0,0]],[[-1,0,0],[-1,0,0],[2,0,0],[2,0,0],[-1,0,0],[1,0,0],[1,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[2,0,0],[4,0,0],[-1,0,0],[3,0,0],[1,0,0],[2,0,0],[2,0,0],[2,0,0],[2,0,0],[-1,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[2,0,0],[3,0,0],[-1,0,0]],[[-1,0,0],[4,0,0],[-1,0,0],[4,0,0],[3,0,0],[2,0,0],[1,0,0],[2,0,0],[3,0,0],[-1,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[2,0,0],[2,0,0],[2,0,0],[3,0,0],[-1,0,0],[1,0,0],[1,0,0],[3,0,0],[3,0,0],[3,0,0],[1,0,0],[1,0,0],[1,0,0],[-1,0,0],[-1,0,0]],[[1,0,0],[2,0,0],[2,0,0],[-1,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0],[2,0,0],[1,0,0],[0,0,0],[1,0,0],[2,0,0],[2,0,0],[1,0,0],[1,0,0],[-1,0,0],[-1,0,0],[3,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0],[3,0,0],[-1,0,0],[2,0,0],[1,0,0],[2,0,0],[2,0,0]],[[2,0,0],[3,0,0],[3,0,0],[3,0,0],[2,0,0],[2,0,0],[2,0,0],[3,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[-1,0,0],[2,0,0],[1,0,0],[2,0,0],[4,0,0],[-1,0,0],[3,0,0],[0,0,0],[0,0,0],[2,0,0],[3,0,0],[5,0,0],[-1,0,0],[3,0,0],[1,0,0],[1,0,0],[0,0,0]],[[-1,0,0],[-1,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[1,0,0],[3,0,0],[-1,0,0],[3,0,0],[1,0,0],[2,0,0],[-1,0,0],[1,0,0],[3,0,0],[-1,0,0],[4,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[2,0,0],[-1,0,0],[2,0,0],[1,0,0]],[[2,0,0],[3,0,0],[2,0,0],[1,0,0],[1,0,0],[2,0,0],[4,0,0],[-1,0,0],[2,0,0],[1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[0,0,0],[2,0,0],[2,0,0],[3,0,0],[4,0,0],[-1,0,0],[-1,0,0],[2,0,0],[0,0,0],[1,0,0],[2,0,0],[2,0,0],[1,0,0],[1,0,0],[2,0,0],[-1,0,0],[1,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0],[2,0,0],[-1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0]]]');

    // parasite check fail - solved - ALL THE WAY!
    //$this->_state = json_decode('[[[0,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[2,0,0],[-1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[2,0,0],[-1,0,0],[2,0,0],[-1,0,0],[-1,0,0],[2,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0]],[[0,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[2,0,0],[2,0,0],[4,0,0],[3,0,0],[3,0,0],[-1,0,0],[2,0,0],[2,0,0],[1,0,0],[1,0,0],[2,0,0],[3,0,0],[3,0,0],[1,0,0],[1,0,0],[-1,0,0],[2,0,0],[2,0,0],[2,0,0],[3,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[1,0,0]],[[0,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0],[2,0,0],[2,0,0],[-1,0,0],[2,0,0],[-1,0,0],[1,0,0],[2,0,0],[-1,0,0],[-1,0,0],[2,0,0],[2,0,0],[2,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0]],[[0,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[3,0,0],[3,0,0],[2,0,0],[1,0,0],[1,0,0],[3,0,0],[3,0,0],[3,0,0],[4,0,0],[-1,0,0],[4,0,0],[2,0,0],[-1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[-1,0,0]],[[0,0,0],[1,0,0],[-1,0,0],[1,0,0],[0,0,0],[0,0,0],[2,0,0],[-1,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[-1,0,0],[5,0,0],[-1,0,0],[4,0,0],[3,0,0],[2,0,0],[2,0,0],[1,0,0],[2,0,0],[2,0,0],[2,0,0],[2,0,0],[1,0,0],[2,0,0],[2,0,0],[2,0,0]],[[1,0,0],[2,0,0],[2,0,0],[1,0,0],[0,0,0],[0,0,0],[2,0,0],[-1,0,0],[-1,0,0],[4,0,0],[2,0,0],[1,0,0],[2,0,0],[3,0,0],[-1,0,0],[-1,0,0],[4,0,0],[-1,0,0],[-1,0,0],[1,0,0],[2,0,0],[-1,0,0],[4,0,0],[-1,0,0],[-1,0,0],[2,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0]],[[1,0,0],[-1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[3,0,0],[-1,0,0],[-1,0,0],[2,0,0],[-1,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[4,0,0],[-1,0,0],[4,0,0],[1,0,0],[2,0,0],[-1,0,0],[5,0,0],[-1,0,0],[4,0,0],[2,0,0],[1,0,0],[2,0,0],[-1,0,0],[1,0,0]],[[1,0,0],[1,0,0],[1,0,0],[0,0,0],[1,0,0],[2,0,0],[3,0,0],[3,0,0],[3,0,0],[2,0,0],[2,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[2,0,0],[-1,0,0],[4,0,0],[2,0,0],[2,0,0],[1,0,0],[3,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0],[1,0,0],[2,0,0],[2,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[-1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[1,0,0],[2,0,0],[-1,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[1,0,0],[1,0,0],[2,0,0],[-1,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[2,0,0],[3,0,0],[3,0,0],[3,0,0],[-1,0,0],[2,0,0],[1,0,0],[2,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0],[1,0,0],[3,0,0],[4,0,0],[-1,0,0],[2,0,0],[2,0,0],[2,0,0],[1,0,0],[0,0,0],[2,0,0],[-1,0,0],[4,0,0],[2,0,0]],[[1,0,0],[1,0,0],[2,0,0],[1,0,0],[1,0,0],[0,0,0],[1,0,0],[2,0,0],[-1,0,0],[3,0,0],[-1,0,0],[1,0,0],[2,0,0],[-1,0,0],[3,0,0],[1,0,0],[0,0,0],[0,0,0],[2,0,0],[-1,0,0],[4,0,0],[3,0,0],[-1,0,0],[-1,0,0],[4,0,0],[2,0,0],[3,0,0],[-1,0,0],[-1,0,0],[1,0,0]],[[2,0,0],[-1,0,0],[2,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[-1,0,0],[2,0,0],[2,0,0],[1,0,0],[2,0,0],[2,0,0],[3,0,0],[-1,0,0],[1,0,0],[1,0,0],[1,0,0],[3,0,0],[-1,0,0],[3,0,0],[-1,0,0],[4,0,0],[-1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[2,0,0],[2,0,0],[1,0,0]],[[-1,0,0],[4,0,0],[4,0,0],[3,0,0],[-1,0,0],[3,0,0],[3,0,0],[3,0,0],[2,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[1,0,0],[-1,0,0],[2,0,0],[2,0,0],[3,0,0],[2,0,0],[2,0,0],[2,0,0],[4,0,0],[3,0,0],[2,0,0],[0,0,0],[0,0,0],[0,0,0]],[[2,0,0],[-1,0,0],[-1,0,0],[3,0,0],[2,0,0],[-1,0,0],[-1,0,0],[3,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[1,0,0],[2,0,0],[2,0,0],[2,0,0],[2,0,0],[1,0,0],[2,0,0],[3,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0],[2,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0],[0,0,0]],[[2,0,0],[5,0,0],[-1,0,0],[3,0,0],[1,0,0],[3,0,0],[-1,0,0],[3,0,0],[1,0,0],[2,0,0],[1,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[1,0,0],[2,0,0],[-1,0,0],[-1,0,0],[4,0,0],[3,0,0],[2,0,0],[3,0,0],[-1,0,0],[2,0,0],[0,0,0],[0,0,0],[0,0,0]],[[-1,0,0],[3,0,0],[-1,0,0],[2,0,0],[0,0,0],[1,0,0],[1,0,0],[1,0,0],[0,0,0],[1,0,0],[-1,0,0],[1,0,0],[0,0,0],[1,0,0],[2,0,0],[2,0,0],[2,0,0],[-1,0,0],[2,0,0],[2,0,0],[3,0,0],[-1,0,0],[-1,0,0],[-1,0,0],[2,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0]]]');
    //return;

    // assign mines to random tiles and set flags for 'visibility' and 'flag'
    $random_data = array_fill(0, $nr_mines, self::MINE);
    $random_data += array_fill($nr_mines, $width * $height - $nr_mines, self::BLANK);
    shuffle($random_data);

    for ($i=0; $i<$height; $i++) {
      for ($j=0; $j<$width; $j++) {
        $this->_state[$i][$j] = array(
          self::VALUE       => array_shift($random_data),
          self::VISIBILITY  => self::CLOSED,
          self::FLAG        => self::NOT_FLAGGED,
        );
      }
    }

    $this->_assignTileValues();
    //echo json_encode($this->_state);
  }


  /**
   * Assigns numerical values to tiles based on the number of adiacent mines.
   */
  private function _assignTileValues() {
    for ($i=0; $i<$this->_height; $i++) {
      for ($j=0; $j<$this->_width; $j++) {
        $this->_assignTileValue($i, $j);
      }
    }
  }


  /**
   * Assigns a numerical value to the tile specified by the $i, $j coordinates.
   * The value is calculated based on the number of adiacent mines.
   */
  private function _assignTileValue($i, $j) {
    if (isset($this->_state[$i][$j][self::VALUE]) && $this->_state[$i][$j][self::VALUE] != self::MINE) {
      $val = 0;
      for ($i1=$i-1; $i1<=$i+1; $i1++) {
        for ($j1=$j-1; $j1<=$j+1; $j1++) {
          if (isset($this->_state[$i1][$j1][self::VALUE]) && $this->_state[$i1][$j1][self::VALUE] == self::MINE) {
            $val ++;
          }
        }
      }
      $this->_state[$i][$j][self::VALUE] = $val;
    }
  }


  /**
   * Returns an array of neighbouring tiles
   *  - the neighbours of the tile specified by the $i, $j coordinates
   * or FALSE on failure - for invalid parameters.
   */
  private function _getNeighbours($i, $j) {
    if (isset($this->_state[$i][$j])) {
      $neighbours = array();
      for ($i1=$i-1; $i1<=$i+1; $i1++) {
        for ($j1=$j-1; $j1<=$j+1; $j1++) {
          if (isset($this->_state[$i1][$j1][self::VALUE]) && ($i != $i1 || $j != $j1)) {
            $neighbours []= array($i1, $j1);
          }
        }
      }
      return $neighbours;
    }
    return FALSE;
  }


  /**
   * Opens the tile specified by the $i, $j coordinates.
   */
  public function open($i, $j) {
    if (!isset($this->_state[$i][$j])) {
      throw new Exception('Invalid coordinates: ' . $i . ', ' . $j);
    }
    if ($this->_state[$i][$j][self::VISIBILITY] === self::OPEN) {
      //throw new Exception('The tile is already open');
      return TRUE;
    }

    $this->_state[$i][$j][self::VISIBILITY] = self::OPEN;

    if ($this->_state[$i][$j][self::VALUE] === self::MINE) {
      // kaboom
      return FALSE;
    }
    else {
      if ($this->_state[$i][$j][self::VALUE] === self::BLANK) {
        $neighbours = $this->_getNeighbours($i, $j);
        foreach ($neighbours as $coord) {
          $this->open($coord[0], $coord[1]);
        }
      }
    }
    
    $this->_updateBoardStatus();
  }

  /**
   * Flags a tile on the board as a mine
   */
  public function flag($i, $j) {
    if (!isset($this->_state[$i][$j])) {
      throw new Exception('Invalid coordinates: ' . $i . ', ' . $j);
    }
    if ($this->_state[$i][$j][self::VISIBILITY] === self::OPEN) {
      //throw new Exception('Can not flag an open tile');
      return FALSE;
    }
    if ($this->_state[$i][$j][self::FLAG] === self::FLAGGED) {
      //throw new Exception('Tile already flagged');
      return FALSE;
    }

    $this->_state[$i][$j][self::FLAG] = self::FLAGGED;

    $this->_updateBoardStatus();
  }

  /**
   * Opens the first blank tile.
   * A tile is considered blank if it has no neighbouring mines.
   * A tile with no adiacent mines will have a value of 0
   */
  public function openFirstBlankTile() {
    //var_dump($this->_state); return;
    for ($i=0; $i<$this->_height; $i++) {
      for ($j=0; $j<$this->_width; $j++) {
        if ($this->_state[$i][$j][self::VALUE] === self::BLANK && $this->_state[$i][$j][self::VISIBILITY] === self::CLOSED) {
          $this->open($i, $j);
          $this->_updateBoardStatus();
          return TRUE;
        }
      }
    }

    return FALSE;
  }

  //private
  public function _updateBoardStatus() {
    $this->_game_ended = TRUE;
    $this->_game_solved = TRUE;
    $this->_game_failed = FALSE;

    for ($i=0; $i<$this->_height; $i++) {
      for ($j=0; $j<$this->_width; $j++) {

        if (
          $this->_state[$i][$j][self::VISIBILITY] === self::CLOSED &&
          $this->_state[$i][$j][self::FLAG] === self::NOT_FLAGGED
        ) {
          $this->_game_ended = FALSE;
          $this->_game_solved = FALSE;
        }

        elseif (
          $this->_state[$i][$j][self::VISIBILITY] === self::OPEN &&
          $this->_state[$i][$j][self::VALUE] === self::MINE
        ) {
          $this->_game_ended = TRUE;
          $this->_game_solved = FALSE;
          $this->_game_failed = TRUE;
          return;
        }

      }
    }
  }

  /*
   *  Public getters
   */
  public function getState() {
    return $this->_state;
  }

  public function getWidth() {
    return $this->_width;
  }

  public function getHeight() {
    return $this->_height;
  }

  public function getNrMines() {
    return $this->_nrMines;
  }


  /**
   * Check if the board is solved.
   * @return bool
   */
  public function isGameSolved() {
    return $this->_game_solved;
  }

  public function isGameFailed() {
    return $this->_game_failed;
  }

  public function isGameFinished() {
    return $this->_game_ended;
  }


  /**
   * Public setters
   */
  public function setState($state) {
    $this->_state = $state;
    $this->_updateBoardStatus();
  }

}

